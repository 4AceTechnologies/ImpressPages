<?php
/**
 * @package   ImpressPages
 * @copyright Copyright (C) 2009 JSC Apro media.
 * @license   GNU/GPL, see ip_license.html
 */

namespace Plugin\SimplePage;

class ControllerZone extends \Frontend\Zone
{
    protected $controller;

    public function __construct($parameters)
    {
        parent::__construct($parameters);

        $this->controller = new \Plugin\HelloWorld\Controller();
    }

    public static function registerController($language, $urlPath, $controller)
    {

    }

    public static function bindPages($pages)
    {
        return $pages;
    }

    /**
     * Get all available elements according prviden parameters
     * You should not necessarily implement all available parameter values and return correct answer.
     * In this example we will only one parameter: $parentElementId.
     * But if you plan to create a public plugin, you need to implement all these options, because other modules might try to use them.
     * @see ip_cms/frontend/Frontend.Zone::getElements()
     */
    public function getElements($languageId = null, $parentElementId = null, $startFrom = 0, $limit = null, $includeHidden = false, $reverseOrder = false, $includeSubdirectories = true, $includeItems = true, $includeItemsFromSubdirectories = false){ //includeSubdirectories and includeItems - additional parameters if you wish to get only directories or items

        if ($parentElementId != null) {
            return array();
        }

        $pages = $this->controller->pages();

        $elements = array();

        foreach ($pages as $urlPath => $pageInfo)
        {
            $element = new ControllerActionElement($pageInfo['id'], $this->getName(), $this->controller, $pageInfo['action']);
            $element->setButtonTitle($pageInfo['title']);
            $element->setPageTitle($pageInfo['title']);

            $elements[]= $element;
        }

        return $elements;
    }


    /**
     * Return an Element object by id
     * @see ip_cms/frontend/Frontend.Zone::getElement()
     * @return Element
     * 
     */
    public function getElement($elementId){
        //get record from the database

        //if the record exist, create an Element object following the same steps as in geltElements function
        $element = new Element($contact['id'], $this->getName());
        $element->setButtonTitle($contact['name']);
        $element->setPageTitle($contact['name']);
        return $element;

    }


    /**
     * Find and return an element according to providen url and get vars.
     * If url is http://www.example.com/en/zone-name/125, urlVars will be an array of one element ['125']
     * If url is http://www.example.com/en/zone-name/page/subpage, urlVars will be an array of two elements ['page', 'subpage'];
     * 
     * getVars is an associative array equal to $_GET array. Direct access of $_GET is not recommended.
     * 
     * This function should be compatible with URL's generated by classes Element and RootElement. This function need to recognize and
     * uniquely identify which element has generated the url with specified URL and GET vars.
     * 
     * @see ip_cms/frontend/Frontend.Zone::findElement()
     * @return Element 
     */
    public function findElement($urlVars, $getVars)
    {
        $pages = $this->controller->pages();

        $urlPath = implode('/', $urlVars);

        if (empty($pages[$urlPath])) {
            return null;
        }

        $pageInfo = $pages[$urlPath];

        $element = new ControllerActionElement($pageInfo['id'], $this->getName(), $this->controller, $pageInfo['action']);
        $element->setButtonTitle($pageInfo['title']);
        $element->setPageTitle($pageInfo['title']);

        return $element;
    }
}
